name: Release
on:
    workflow_dispatch:
    # push:
    #     branches:
    #         - main
    #         - development

jobs:
    build_image:
        runs-on: ubuntu-latest

        env:
            DOCKERFILE: ci/dockerfile

        steps:
            - name: Git checkout
              uses: actions/checkout@v4

            - name: Get short sha commit
              id: git
              run: |
                  echo "short_sha=$(git rev-parse --short $GITHUB_SHA)" >> "$GITHUB_OUTPUT"

            - name: Get latest version
              id: version
              uses: martinbeentjes/npm-get-version-action@main

            - name: Git
              run: |
                  echo Branch name is: ${{ github.ref_name }}
                  echo Short sha: ${{ steps.git.outputs.short_sha }}
                  echo Version is: ${{ steps.version.outputs.current-version }}

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx for Builder
              uses: docker/setup-buildx-action@v3

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build & Push & Tag Production
              if: ${{ github.ref_name == 'main' }}
              run: |
                  docker build --build-arg NODE_ENV=${{ env.NODE_ENV }} -t ${{ vars.AWS_ECR_REPO_URL }}:latest -f ./ci/dockerfile .
                  docker tag ${{ vars.AWS_ECR_REPO_URL }}:latest ${{ vars.AWS_ECR_REPO_URL }}:sha-${{ steps.git.outputs.short_sha }}
                  docker tag ${{ vars.AWS_ECR_REPO_URL }}:latest ${{ vars.AWS_ECR_REPO_URL }}:latest
                  docker tag ${{ vars.AWS_ECR_REPO_URL }}:latest ${{ vars.AWS_ECR_REPO_URL }}:${{ env.NODE_ENV }}
                  docker push ${{ vars.AWS_ECR_REPO_URL }}:sha-${{ steps.git.outputs.short_sha }}
                  docker push ${{ vars.AWS_ECR_REPO_URL }}:latest
                  docker push ${{ vars.AWS_ECR_REPO_URL }}:${{ env.NODE_ENV }}
              env:
                  NODE_ENV: production

            - name: Build & Push & Tag Development
              if: ${{ github.ref_name == 'development' }}
              run: |
                  docker build --build-arg NODE_ENV=${{ env.NODE_ENV }} -t ${{ vars.AWS_ECR_REPO_URL }}:latest -f ./ci/dockerfile .
                  docker tag ${{ vars.AWS_ECR_REPO_URL }}:latest ${{ vars.AWS_ECR_REPO_URL }}:sha-${{ steps.git.outputs.short_sha }}
                  docker tag ${{ vars.AWS_ECR_REPO_URL }}:latest ${{ vars.AWS_ECR_REPO_URL }}:${{ env.NODE_ENV }}
                  docker push ${{ vars.AWS_ECR_REPO_URL }}:sha-${{ steps.git.outputs.short_sha }}
                  docker push ${{ vars.AWS_ECR_REPO_URL }}:${{ env.NODE_ENV }}
              env:
                  NODE_ENV: development
    deploy:
        needs: [build_image]
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Update AWS EC2 Instance for Production
              if: ${{ github.ref_name == 'main' }}
              run: |
                  aws ssm send-command \
                      --instance-ids "${{ vars.AWS_INSTANCE_ID_PROD }}" \
                      --document-name "AWS-RunShellScript" \
                      --comment "Release new version" \
                      --parameters commands='[
                          "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.AWS_ECR_REPO_URL }}",
                          "docker pull ${{ vars.AWS_ECR_REPO_URL }}:production",
                          "docker stop ${{ vars.DOCKER_CONTAINER_NAME }} && docker rm ${{ vars.DOCKER_CONTAINER_NAME }}",
                          "docker network create app-network --driver=bridge",
                          "docker run -itd --env NODE_ENV=production --hostname ${{ vars.DOCKER_CONTAINER_NAME }} --publish ${{ vars.DOCKER_CONTAINER_PORT }}:3000 --network app-network --volume /home/ec2-user/${{ vars.DOCKER_CONTAINER_NAME }}/.env:/app/.env --volume /home/ec2-user/${{ vars.DOCKER_CONTAINER_NAME }}/logs/:/app/logs/ --restart unless-stopped --name ${{ vars.DOCKER_CONTAINER_NAME }} ${{ vars.AWS_ECR_REPO_URL }}:production"
                      ]'

            - name: Update AWS EC2 Instance for Development
              if: ${{ github.ref_name == 'development' }}
              run: |
                  aws ssm send-command \
                      --instance-ids "${{ vars.AWS_INSTANCE_ID_DEV }}" \
                      --document-name "AWS-RunShellScript" \
                      --comment "Release new version" \
                      --parameters commands='[
                          "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.AWS_ECR_REPO_URL }}",
                          "docker pull ${{ vars.AWS_ECR_REPO_URL }}:development",
                          "docker stop ${{ vars.DOCKER_CONTAINER_NAME }} && docker rm ${{ vars.DOCKER_CONTAINER_NAME }}",
                          "docker network create app-network --driver=bridge",
                          "docker run -itd --env NODE_ENV=development --hostname ${{ vars.DOCKER_CONTAINER_NAME }} --publish ${{ vars.DOCKER_CONTAINER_PORT }}:3000 --network app-network --volume /home/ec2-user/${{ vars.DOCKER_CONTAINER_NAME }}/.env:/app/.env --volume /home/ec2-user/${{ vars.DOCKER_CONTAINER_NAME }}/logs/:/app/logs/ --restart unless-stopped --name ${{ vars.DOCKER_CONTAINER_NAME }} ${{ vars.AWS_ECR_REPO_URL }}:development"
                      ]'
    clean:
        needs: [deploy]
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Clean AWS EC2 Instance for Production
              if: ${{ github.ref_name == 'main' }}
              run: |
                  aws ssm send-command \
                      --instance-ids "${{ vars.AWS_INSTANCE_ID_PROD }}" \
                      --document-name "AWS-RunShellScript" \
                      --comment "Clean up" \
                      --parameters commands='[
                          "docker image prune --force",
                          "docker rmi $(docker images ${{ vars.AWS_ECR_REPO_URL }}/** -q) --force"
                      ]'

            - name: Clean AWS EC2 Instance for Development
              if: ${{ github.ref_name == 'development' }}
              run: |
                  aws ssm send-command \
                      --instance-ids "${{ vars.AWS_INSTANCE_ID_DEV }}" \
                      --document-name "AWS-RunShellScript" \
                      --comment "Clean up" \
                      --parameters commands='[
                          "docker image prune --force",
                          "docker rmi $(docker images ${{ vars.AWS_ECR_REPO_URL }}/** -q) --force"
                      ]'
